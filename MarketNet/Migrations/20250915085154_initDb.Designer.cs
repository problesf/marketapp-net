// <auto-generated />
using System;
using MarketNet.Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarketNet.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250915085154_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<long>("CategoriesId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryProduct_categories_id");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryProduct_products_id");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_cancelled_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("order_currency");

                    b.Property<long>("CustomerProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_customer_profile_id");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_delivered_at");

                    b.Property<decimal>("DiscountTotal")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("order_discount_total");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("order_grand_total");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_paid_at");

                    b.Property<DateTime>("PlaceAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_place_at");

                    b.Property<decimal>("ShippingTotal")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("order_shipping_total");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("order_status");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("order_sub_total");

                    b.Property<decimal>("TaxTotal")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("order_tax_total");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("OrderNumber")
                        .HasDatabaseName("ix_orders_ordernumber");

                    b.HasIndex("PlaceAt", "Status")
                        .HasDatabaseName("ix_orders_placeat_status");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("order_item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CodeSnapshot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_item_code_snapshot");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("order_item_line_total");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_item_order_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_item_product_id");

                    b.Property<string>("ProductNameSnapshot")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("order_item_product_name_snapshot");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_quantity");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,4)")
                        .HasColumnName("order_item_tax_rate");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("order_item_unit_price");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("payment_amount");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("payment_currency");

                    b.Property<string>("ExternalReference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("payment_external_reference");

                    b.Property<DateTime>("OcurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_ocurred_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_order_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_provider");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_status");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("shipment_carrier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("shipment_cost");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shipment_delivered_at");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_order_id");

                    b.Property<DateTime>("ShippedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shipment_shipped_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shipment_status");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("shipment_tracking_number");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("shipments", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Products.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category_name");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_parent_category_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_slug");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_code");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasColumnName("product_currency")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("product_description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("product_is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("product_price");

                    b.Property<long>("SellerProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_seller_profile_id");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("product_stock");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("product_tax_rate");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SellerProfileId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.CustomerProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("customer_profile_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DefaultBillingAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_profile_default_billing_address_id");

                    b.Property<long?>("DefaultShippingAddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_profile_default_shipping_address_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_profile_user_id");

                    b.HasKey("Id");

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("customer_profiles", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.SellerProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seller_profile_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("PayoutAccount")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("seller_profile_payout_account");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("seller_profile_store_name");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("seller_profile_tax_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("seller_profile_user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("seller_profiles", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_password_hash");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.entities.Customers.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("address_city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("address_country");

                    b.Property<long>("CustomerProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_customer_profile_id");

                    b.Property<bool>("IsDefaultBilling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("address_is_default_billing");

                    b.Property<bool>("IsDefaultShipping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("address_is_default_shipping");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line1");

                    b.Property<string>("Line2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("address_postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("address_state");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId")
                        .HasDatabaseName("ix_addresses_customerprofileid");

                    b.HasIndex("CustomerProfileId", "IsDefaultBilling")
                        .HasDatabaseName("ix_addresses_default_billing");

                    b.HasIndex("CustomerProfileId", "IsDefaultShipping")
                        .HasDatabaseName("ix_addresses_default_shipping");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.entities.Inventory.InventoryMovement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_movement_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_movement_product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_movement_quantity");

                    b.Property<int>("Reason")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_movement_reason");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inventory_movement_reference");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("inventory_movements", (string)null);
                });

            modelBuilder.Entity("MarketNet.Domain.entities.Reviews.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("review_comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("review_created_at");

                    b.Property<long>("CustomerProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_customer_profile_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("review_rating");

                    b.Property<bool>("isApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("review_is_approved");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.HasIndex("ProductId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.Products.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketNet.Domain.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.Order", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.User.CustomerProfile", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MarketNet.Domain.valueObjects.AddressSnapshot", "BillingAddressSnapshot", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint")
                                .HasColumnName("order_id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("order_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(2)
                                .IsUnicode(false)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("order_country");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("order_line1");

                            b1.Property<string>("Line2")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("order_line2");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("order_postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("order_state");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("MarketNet.Domain.valueObjects.AddressSnapshot", "ShippingAddressSnapshot", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .HasColumnType("bigint")
                                .HasColumnName("order_id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("order_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(2)
                                .IsUnicode(false)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("order_country");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("order_line1");

                            b1.Property<string>("Line2")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("order_line2");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("order_postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("order_state");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("BillingAddressSnapshot")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ShippingAddressSnapshot")
                        .IsRequired();
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.Order.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketNet.Domain.Entities.Products.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.Payment", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.Order.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.Shipment", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.Order.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Products.Category", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.Products.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.User.SellerProfile", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.CustomerProfile", b =>
                {
                    b.HasOne("MarketNet.Domain.entities.Customers.Address", "DefaultBillingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultBillingAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MarketNet.Domain.entities.Customers.Address", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MarketNet.Domain.Entities.User.User", "User")
                        .WithOne("CustomerProfile")
                        .HasForeignKey("MarketNet.Domain.Entities.User.CustomerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultBillingAddress");

                    b.Navigation("DefaultShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.SellerProfile", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.User.User", "User")
                        .WithOne("SellerProfile")
                        .HasForeignKey("MarketNet.Domain.Entities.User.SellerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketNet.Domain.entities.Customers.Address", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.User.CustomerProfile", "CustomerProfile")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("MarketNet.Domain.entities.Inventory.InventoryMovement", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.Products.Product", "Product")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketNet.Domain.entities.Reviews.Review", b =>
                {
                    b.HasOne("MarketNet.Domain.Entities.User.CustomerProfile", "CustomerProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MarketNet.Domain.Entities.Products.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerProfile");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Order.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Products.Category", b =>
                {
                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.CustomerProfile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.SellerProfile", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketNet.Domain.Entities.User.User", b =>
                {
                    b.Navigation("CustomerProfile");

                    b.Navigation("SellerProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
